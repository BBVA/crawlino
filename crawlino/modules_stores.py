import osimport importlibfrom typing import Callable, Union, Listfrom collections import defaultdictimport crawlino.config as configclass _CrawlinoModulesStore:    """    This class stores the functions of each module    """    def __init__(self):        self.modules = defaultdict(list)        self.module_map = defaultdict(list)    def load_modules(self):        def _get_all_python_files() -> List[str]:            """Looking for all .py trying to find plugin files"""            modules_path = {os.path.join(os.path.dirname(__file__), "plugins")}            if config.PLUGINS_LOCATION:                modules_path.add(config.PLUGINS_LOCATION)            results_paths = set()            for p in modules_path:                for root, dirs, files in os.walk(p):                    if os.path.basename(root).startswith(("_", ".")):                        continue                    for f in files:                        if f.endswith("pyc") or f.startswith("_") or \                                not f.endswith("py"):                            continue                        results_paths.add(os.path.join(root, f))            return list(results_paths)        def _file_to_package(file_name: str):            """Convert a Path-like to Python-like package:            /my/home/project/package/plugins/my_plugin ->            project.package.plugins.my_plugin            """            # Get where crawlino package starts            crawlino_package = __file__[:__file__.rfind("crawlino")]            # File format to package format            module_path = file_name.replace(crawlino_package, "")            return module_path.replace(".py", "").replace("/", ".")        plugins_paths = _get_all_python_files()        for module in plugins_paths:            module_objects = importlib.import_module(_file_to_package(                module))            for plugin_name, plugin_obj in vars(module_objects).items():                if plugin_name.startswith("_") or \                                type(plugin_obj).__name__ != "function":                    continue                if hasattr(plugin_obj, "crawlino_module_name"):                    self.modules[plugin_obj.crawlino_module_type].append(                        plugin_obj)                    module_key = f"{plugin_obj.crawlino_module_type}_" \                                 f"{plugin_obj.crawlino_module_name}"                    self.module_map[module_key] = plugin_obj    def find_module(self,                    module_type: str,                    module_name: str) -> Callable or None:        """Example:        >>> CrawlinoModulesStore.find_module("input", "rest")        <fun ...>        """        if not self.modules:            self.load_modules()        try:            return self.module_map.get(f"{module_type}_{module_name}")        except NameError:            return NoneCrawlinoModulesStore = _CrawlinoModulesStore()fm = CrawlinoModulesStore.find_module__all__ = ("CrawlinoModulesStore", "fm")